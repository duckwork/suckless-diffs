diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..ccaac6b
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,4 @@
+*.o
+patch/
+dmenu
+stest
diff --git a/config.h b/config.h
new file mode 100644
index 0000000..9b6e031
--- /dev/null
+++ b/config.h
@@ -0,0 +1,30 @@
+/* See LICENSE file for copyright and license details. */
+/* Default settings; can be overriden by command line. */
+
+#include "../wm.h"
+
+static int topbar = 1;      /* -b  option; if 0, dmenu appears at bottom     */
+static int incremental = 0; /* -r  option; if 1, dmenu prints incrementally  */
+static int instant = 0;     /* -n  option; if 1, dmenu ends immediately
+                                           on a distinct match               */
+static int casesensitive = 1; /* -i option; if 0, dmenu isn't case sensitive */
+/* -l option; if nonzero, dmenu uses vertical list with given number of lines */
+static unsigned int lines      = 0;
+/* -fn option overrides fonts[0]; default X11 font or font set */
+static const char *fonts[] = {
+	FONT,
+	"monospace:size=10"
+};
+static const char *prompt      = NULL;      /* -p  option; prompt to the left of input field */
+static const char *normbgcolor = COLOR_BLACK; /* -nb option; normal background                 */
+static const char *normfgcolor = COLOR_FG; /* -nf option; normal foreground                 */
+static const char *selbgcolor  = COLOR_BLACK; /* -sb option; selected background               */
+static const char *selfgcolor  = COLOR_YELLOW; /* -sf option; selected foreground               */
+static const char *outbgcolor  = "#00ffff";
+static const char *outfgcolor  = "#000000";
+
+/*
+ * Characters not considered part of a word while deleting words
+ * for example: " /?\"&[]"
+ */
+static const char worddelimiters[] = " ";
diff --git a/dmenu.1 b/dmenu.1
index d3ab805..681933e 100644
--- a/dmenu.1
+++ b/dmenu.1
@@ -6,10 +6,11 @@ dmenu \- dynamic menu
 .RB [ \-b ]
 .RB [ \-f ]
 .RB [ \-i ]
+.RB [ \-r ]
 .RB [ \-l
+.IR lines ]
 .RB [ \-m
 .IR monitor ]
-.IR lines ]
 .RB [ \-p
 .IR prompt ]
 .RB [ \-fn
@@ -48,9 +49,30 @@ X until stdin reaches end\-of\-file.
 .B \-i
 dmenu matches menu items case insensitively.
 .TP
+.B \-r
+dmenu outputs text each time a key is pressed.
+.TP
 .BI \-l " lines"
 dmenu lists items vertically, with the given number of lines.
 .TP
+.BI \-x " xoffset"
+dmenu is placed at this offset measured from the left side of the monitor.
+Can be negative.
+If option
+.B \-m
+is present, the measurement will use the given monitor.
+.TP
+.BI \-y " yoffset"
+dmenu is placed at this offset measured from the top of the monitor.  If the
+.B \-b
+option is used, the offset is measured from the bottom.  Can be negative.
+If option
+.B \-m
+is present, the measurement will use the given monitor.
+.TP
+.BI \-w " width"
+sets the width of the dmenu window.
+.TP
 .BI \-m " monitor"
 dmenu is displayed on the monitor number supplied. Monitor numbers are starting
 from 0.
diff --git a/dmenu.c b/dmenu.c
index e0c2f80..0af5f89 100644
--- a/dmenu.c
+++ b/dmenu.c
@@ -37,6 +37,9 @@ struct item {
 static char text[BUFSIZ] = "";
 static int bh, mw, mh;
 static int sw, sh; /* X display screen geometry width, height */
+static int dmx = 0; /* put dmenu at this x offset */
+static int dmy = 0; /* put dmenu at this y offset (measured from the bottom if topbar is 0) */
+static unsigned int dmw = 0; /* make dmenu this wide */
 static int inputw, promptw;
 static size_t cursor;
 static struct item *items = NULL;
@@ -141,7 +144,6 @@ drawmenu(void)
 
 	if (lines > 0) {
 		/* draw vertical list */
-		w = mw - x;
 		for (item = curr; item != next; item = item->right) {
 			y += h;
 			if (item == sel)
@@ -151,7 +153,7 @@ drawmenu(void)
 			else
 				drw_setscheme(drw, &scheme[SchemeNorm]);
 
-			drw_text(drw, x, y, w, bh, item->text, 0);
+			drw_text(drw, 0, y, mw, bh, item->text, 0);
 		}
 	} else if (matches) {
 		/* draw horizontal list */
@@ -250,6 +252,11 @@ match(void)
 		matchend = substrend;
 	}
 	curr = sel = matches;
+	if (instant && matches && matches==matchend && !lsubstr) {
+		puts(matches->text);
+		cleanup();
+		exit(0);
+	}
 	calcoffsets();
 }
 
@@ -277,6 +284,129 @@ nextrune(int inc)
 	return n;
 }
 
+void
+buttonpress(XEvent *e)
+{
+	struct item *item;
+	XButtonPressedEvent *ev = &e->xbutton;
+	int xpos, ypos, wpos, hpos;
+
+	if(ev->window != win)
+		return;
+
+	/* right-click: exit */
+	if(ev->button == Button3)
+		exit(EXIT_FAILURE);
+
+	xpos = 0;
+	ypos = 0;
+	hpos = bh;
+
+	if(prompt && *prompt) {
+		wpos = promptw;
+		xpos = wpos;
+	}
+	/* input field */
+	wpos = (lines > 0 || !matches) ? mw - xpos : inputw;
+
+	/* left-click on input: clear input,
+	 * NOTE: if there is no left-arrow the space for < is reserved so
+	 *       add that to the input width */
+	if(ev->button == Button1 &&
+	   ((lines <= 0 && ev->x >= 0 && ev->x <= xpos + wpos +
+	   ((!prev || !curr->left) ? TEXTW("<") : 0)) ||
+	   (lines > 0 && ev->y >= ypos && ev->y <= ypos + hpos))) {
+		insert(NULL, 0 - cursor);
+		drawmenu();
+		return;
+	}
+	/* middle-mouse click: paste selection */
+	if(ev->button == Button2) {
+		XConvertSelection(dpy, (ev->state & ShiftMask) ? clip : XA_PRIMARY,
+		                  utf8, utf8, win, CurrentTime);
+		drawmenu();
+		return;
+	}
+	/* scroll up */
+	if(ev->button == Button4 && prev) {
+		sel = curr = prev;
+		calcoffsets();
+		drawmenu();
+		return;
+	}
+	/* scroll down */
+	if(ev->button == Button5 && next) {
+		sel = curr = next;
+		calcoffsets();
+		drawmenu();
+		return;
+	}
+	if(ev->button != Button1)
+		return;
+	if(ev->state & ~ControlMask)
+		return;
+	if(lines > 0) {
+		/* vertical list: (ctrl-)left-click on item */
+		wpos = mw - xpos;
+		for(item = curr; item != next; item = item->right) {
+			ypos += hpos;
+			if(ev->y >= ypos && ev->y <= (ypos + hpos)) {
+				puts(item->text);
+				sel=item;
+				if (!(ev->state & ControlMask)) {
+					cleanup();
+					exit(EXIT_SUCCESS);
+				}
+				if (sel) {
+					sel->out = 1;
+					drawmenu();
+				}
+				return;
+			}
+		}
+	}
+	else if(matches) {
+		/* left-click on left arrow */
+		xpos += inputw;
+		wpos = TEXTW("<");
+		if(prev && curr->left) {
+			if(ev->x >= xpos && ev->x <= xpos + wpos) {
+				sel = curr = prev;
+				calcoffsets();
+				drawmenu();
+				return;
+			}
+		}
+		/* horizontal list: (ctrl-)left-click on item */
+		for(item = curr; item != next; item = item->right) {
+			xpos += wpos;
+			wpos = MIN(TEXTW(item->text), mw - xpos - TEXTW(">"));
+			if(ev->x >= xpos && ev->x <= (xpos + wpos)) {
+				puts(item->text);
+				sel=item;
+				if (!(ev->state & ControlMask)) {
+					cleanup();
+					exit(EXIT_SUCCESS);
+				}
+				if (sel) {
+					sel->out = 1;
+					drawmenu();
+				}
+				return;
+			}
+		}
+		/* left-click on right arrow */
+		wpos = TEXTW(">");
+		xpos = mw - wpos;
+		if(next && ev->x >= xpos && ev->x <= xpos + wpos) {
+			sel = curr = next;
+			calcoffsets();
+			drawmenu();
+			return;
+		}
+	}
+}
+
 static void
 keypress(XKeyEvent *ev)
 {
@@ -447,6 +577,10 @@ keypress(XKeyEvent *ev)
 		match();
 		break;
 	}
+	if (incremental) {
+		fprintf(stdout, "%s\n", text);
+		fflush(stdout);
+        }
 	drawmenu();
 }
 
@@ -487,6 +621,7 @@ readstdin(void)
 	}
 	if (items)
 		items[i].text = NULL;
+	if (i == 1 && items[0].text[0] == '\0') items = realloc(items, 0);
 	inputw = maxstr ? TEXTW(maxstr) : 0;
 	lines = MIN(lines, i);
 }
@@ -504,6 +639,9 @@ run(void)
 			if (ev.xexpose.count == 0)
 				drw_map(drw, win, 0, 0, mw, mh);
 			break;
+		case ButtonPress:
+			buttonpress(&ev);
+			break;
 		case KeyPress:
 			keypress(&ev.xkey);
 			break;
@@ -525,6 +663,9 @@ setup(void)
 	int x, y;
 	XSetWindowAttributes swa;
 	XIM xim;
+	XClassHint *ch = XAllocClassHint();
+	ch->res_name = "dmenu";
+	ch->res_class = "dmenu";
 #ifdef XINERAMA
 	XineramaScreenInfo *info;
 	Window w, pw, dw, *dws;
@@ -573,16 +714,16 @@ setup(void)
 				if (INTERSECT(x, y, 1, 1, info[i]))
 					break;
 
-		x = info[i].x_org;
-		y = info[i].y_org + (topbar ? 0 : info[i].height - mh);
-		mw = info[i].width;
+		x = info[i].x_org + dmx;
+		y = info[i].y_org + (topbar ? dmy : info[i].height - mh - dmy);
+		mw = (dmw>0 ? dmw : info[i].width);
 		XFree(info);
 	} else
 #endif
 	{
-		x = 0;
-		y = topbar ? 0 : sh - mh;
-		mw = sw;
+		x = dmx;
+		y = topbar ? dmy : sh - mh - dmy;
+		mw = (dmw>0 ? dmw : sw);
 	}
 	promptw = (prompt && *prompt) ? TEXTW(prompt) : 0;
 	inputw = MIN(inputw, mw/3);
@@ -591,7 +732,8 @@ setup(void)
 	/* create menu window */
 	swa.override_redirect = True;
 	swa.background_pixel = scheme[SchemeNorm].bg->pix;
-	swa.event_mask = ExposureMask | KeyPressMask | VisibilityChangeMask;
+	swa.event_mask = ExposureMask | KeyPressMask | VisibilityChangeMask |
+	                 ButtonPressMask;
 	win = XCreateWindow(dpy, root, x, y, mw, mh, 0,
 	                    DefaultDepth(dpy, screen), CopyFromParent,
 	                    DefaultVisual(dpy, screen),
@@ -603,6 +745,8 @@ setup(void)
 	                XNClientWindow, win, XNFocusWindow, win, NULL);
 
 	XMapRaised(dpy, win);
+	XSetClassHint(dpy, win, ch);
+	XFree(ch);
 	drw_resize(drw, mw, mh);
 	drawmenu();
 }
@@ -610,7 +754,8 @@ setup(void)
 static void
 usage(void)
 {
-	fputs("usage: dmenu [-b] [-f] [-i] [-l lines] [-p prompt] [-fn font] [-m monitor]\n"
+	fputs("usage: dmenu [-b] [-f] [-r|R] [-i] [-n|N] [-l lines] [-p prompt] [-fn font] [-m monitor]\n"
+              "             [-x xoffset -y yoffset -w width]\n"
 	      "             [-nb color] [-nf color] [-sb color] [-sf color] [-v]\n", stderr);
 	exit(1);
 }
@@ -627,16 +772,29 @@ main(int argc, char *argv[])
 			exit(0);
 		} else if (!strcmp(argv[i], "-b")) /* appears at the bottom of the screen */
 			topbar = 0;
+		else if (!strcmp(argv[i], "-r")) /* prints incremental match */
+			incremental = 1;
+		else if (!strcmp(argv[i], "-R")) /* NOprints incremental match */
+			incremental = 0;
 		else if (!strcmp(argv[i], "-f"))   /* grabs keyboard before reading stdin */
 			fast = 1;
+		else if (!strcmp(argv[i], "-n")) /* instant match */
+			instant = 1;
+		else if (!strcmp(argv[i], "-N")) /* NOinstant match */
+			instant = 0;
 		else if (!strcmp(argv[i], "-i")) { /* case-insensitive item matching */
-			fstrncmp = strncasecmp;
-			fstrstr = cistrstr;
+			casesensitive = casesensitive ? 0 : 1;
 		} else if (i + 1 == argc)
 			usage();
 		/* these options take one argument */
 		else if (!strcmp(argv[i], "-l"))   /* number of lines in vertical list */
 			lines = atoi(argv[++i]);
+		else if (!strcmp(argv[i], "-x"))   /* window x offset */
+			dmx = atoi(argv[++i]);
+		else if (!strcmp(argv[i], "-y"))   /* window y offset (from bottom up if -b) */
+			dmy = atoi(argv[++i]);
+		else if (!strcmp(argv[i], "-w"))   /* make dmenu this wide */
+			dmw = atoi(argv[++i]);
 		else if (!strcmp(argv[i], "-m"))
 			mon = atoi(argv[++i]);
 		else if (!strcmp(argv[i], "-p"))   /* adds prompt to left of input field */
@@ -675,6 +833,10 @@ main(int argc, char *argv[])
 		readstdin();
 		grabkeyboard();
 	}
+	if (!casesensitive) {
+		fstrncmp = strncasecmp;
+		fstrstr = cistrstr;
+	}
 	setup();
 	run();
 
